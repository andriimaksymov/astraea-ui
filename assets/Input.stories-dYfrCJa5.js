import{j as e}from"./jsx-runtime-BnIj46N_.js";import{P as d}from"./PlusIcon-B-nK3-sl.js";import{d as t,S as j,I as T}from"./Tooltip-DtvHZ2Wz.js";import"./index-CsdIBAqE.js";import"./index-5f0m1pej.js";import"./Radio-B8ygnOKm.js";import{S as s}from"./Stack-D1kKokOu.js";import"./Typography-DI-SgLTX.js";import"./clsx-B-dksMZM.js";import"./extends-CCbyfPlC.js";import"./index-MS7LKRHD.js";const R={title:"Input",tags:["autodocs"],parameters:{docs:{description:{component:"Input let users enter and edit text."}}},component:t},r=n=>e.jsxs(s,{spacing:3,justify:"center",align:"center",children:[e.jsx(t,{variant:"outlined",placeholder:"Outlined",...n}),e.jsx(t,{variant:"contained",placeholder:"Contained",...n}),e.jsx(t,{variant:"underline",placeholder:"Underline",...n})]}),a=n=>e.jsxs(s,{spacing:3,justify:"center",align:"center",children:[e.jsx(t,{hasError:!0,variant:"outlined",placeholder:"Outlined",...n}),e.jsx(t,{hasError:!0,variant:"contained",placeholder:"Contained",...n}),e.jsx(t,{hasError:!0,variant:"underline",placeholder:"Underline",...n})]}),i=n=>e.jsxs(s,{spacing:3,justify:"center",align:"center",children:[e.jsx(t,{disabled:!0,variant:"outlined",placeholder:"Outlined",...n}),e.jsx(t,{disabled:!0,variant:"contained",placeholder:"Contained",...n}),e.jsx(t,{disabled:!0,variant:"underline",placeholder:"Underline",...n})]}),o=n=>e.jsxs(s,{spacing:3,justify:"center",align:"center",children:[e.jsx(t,{startAdornment:e.jsx(j,{icon:d,fontSize:"small"}),variant:"outlined",placeholder:"Outlined",...n}),e.jsx(t,{startAdornment:"Kg",variant:"outlined",placeholder:"Outlined",...n}),e.jsx(t,{endAdornment:e.jsx(T,{icon:d}),variant:"outlined",placeholder:"Outlined",...n})]});r.__docgenInfo={description:"",methods:[],displayName:"Basic",props:{controlClassName:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input."},className:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input wrapper."},endAdornment:{required:!1,tsType:{name:"ReactNode"},description:"End input adornment for this component."},hasError:{required:!1,tsType:{name:"boolean"},description:`If true the component will have error styles.
@default false`},startAdornment:{required:!1,tsType:{name:"ReactNode"},description:"Start input adornment for this component."},variant:{required:!1,tsType:{name:"union",raw:'"contained" | "outlined" | "underline"',elements:[{name:"literal",value:'"contained"'},{name:"literal",value:'"outlined"'},{name:"literal",value:'"underline"'}]},description:`The variant to use.
@default 'contained'`}}};a.__docgenInfo={description:"",methods:[],displayName:"Error",props:{controlClassName:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input."},className:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input wrapper."},endAdornment:{required:!1,tsType:{name:"ReactNode"},description:"End input adornment for this component."},hasError:{required:!1,tsType:{name:"boolean"},description:`If true the component will have error styles.
@default false`},startAdornment:{required:!1,tsType:{name:"ReactNode"},description:"Start input adornment for this component."},variant:{required:!1,tsType:{name:"union",raw:'"contained" | "outlined" | "underline"',elements:[{name:"literal",value:'"contained"'},{name:"literal",value:'"outlined"'},{name:"literal",value:'"underline"'}]},description:`The variant to use.
@default 'contained'`}}};i.__docgenInfo={description:"",methods:[],displayName:"Disabled",props:{controlClassName:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input."},className:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input wrapper."},endAdornment:{required:!1,tsType:{name:"ReactNode"},description:"End input adornment for this component."},hasError:{required:!1,tsType:{name:"boolean"},description:`If true the component will have error styles.
@default false`},startAdornment:{required:!1,tsType:{name:"ReactNode"},description:"Start input adornment for this component."},variant:{required:!1,tsType:{name:"union",raw:'"contained" | "outlined" | "underline"',elements:[{name:"literal",value:'"contained"'},{name:"literal",value:'"outlined"'},{name:"literal",value:'"underline"'}]},description:`The variant to use.
@default 'contained'`}}};o.__docgenInfo={description:"",methods:[],displayName:"Adornments",props:{controlClassName:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input."},className:{required:!1,tsType:{name:"string"},description:"Override or extend the style applied to the input wrapper."},endAdornment:{required:!1,tsType:{name:"ReactNode"},description:"End input adornment for this component."},hasError:{required:!1,tsType:{name:"boolean"},description:`If true the component will have error styles.
@default false`},startAdornment:{required:!1,tsType:{name:"ReactNode"},description:"Start input adornment for this component."},variant:{required:!1,tsType:{name:"union",raw:'"contained" | "outlined" | "underline"',elements:[{name:"literal",value:'"contained"'},{name:"literal",value:'"outlined"'},{name:"literal",value:'"underline"'}]},description:`The variant to use.
@default 'contained'`}}};var l,p,c;r.parameters={...r.parameters,docs:{...(l=r.parameters)==null?void 0:l.docs,source:{originalSource:`(args: InputProps) => <Stack spacing={3} justify="center" align="center">
    <Input variant="outlined" placeholder="Outlined" {...args} />
    <Input variant="contained" placeholder="Contained" {...args} />
    <Input variant="underline" placeholder="Underline" {...args} />
  </Stack>`,...(c=(p=r.parameters)==null?void 0:p.docs)==null?void 0:c.source}}};var u,m,h;a.parameters={...a.parameters,docs:{...(u=a.parameters)==null?void 0:u.docs,source:{originalSource:`(args: InputProps) => <Stack spacing={3} justify="center" align="center">
    <Input hasError variant="outlined" placeholder="Outlined" {...args} />
    <Input hasError variant="contained" placeholder="Contained" {...args} />
    <Input hasError variant="underline" placeholder="Underline" {...args} />
  </Stack>`,...(h=(m=a.parameters)==null?void 0:m.docs)==null?void 0:h.source}}};var f,v,y;i.parameters={...i.parameters,docs:{...(f=i.parameters)==null?void 0:f.docs,source:{originalSource:`(args: InputProps) => <Stack spacing={3} justify="center" align="center">
    <Input disabled variant="outlined" placeholder="Outlined" {...args} />
    <Input disabled variant="contained" placeholder="Contained" {...args} />
    <Input disabled variant="underline" placeholder="Underline" {...args} />
  </Stack>`,...(y=(v=i.parameters)==null?void 0:v.docs)==null?void 0:y.source}}};var g,I,x;o.parameters={...o.parameters,docs:{...(g=o.parameters)==null?void 0:g.docs,source:{originalSource:`(args: InputProps) => <Stack spacing={3} justify="center" align="center">
    <Input startAdornment={<SvgIcon icon={PlusIcon} fontSize="small" />} variant="outlined" placeholder="Outlined" {...args} />
    <Input startAdornment="Kg" variant="outlined" placeholder="Outlined" {...args} />
    <Input endAdornment={<IconButton icon={PlusIcon} />} variant="outlined" placeholder="Outlined" {...args} />
  </Stack>`,...(x=(I=o.parameters)==null?void 0:I.docs)==null?void 0:x.source}}};const P=["Basic","Error","Disabled","Adornments"];export{o as Adornments,r as Basic,i as Disabled,a as Error,P as __namedExportsOrder,R as default};
